

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Nov 12 18:46:52 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    19  0000                     
    20                           	psect	idataCOMRAM
    21  00FDC7                     __pidataCOMRAM:
    22                           	opt stack 0
    23                           
    24                           ;initializer for _a
    25  00FDC7  01                 	db	1
    26  0000                     _ANSEL	set	3966
    27  0000                     _LATB	set	3978
    28  0000                     _LATD	set	3980
    29  0000                     _PORTAbits	set	3968
    30  0000                     _PORTB	set	3969
    31  0000                     _PORTD	set	3971
    32  0000                     _TRISA	set	3986
    33  0000                     _TRISB	set	3987
    34  0000                     _TRISD	set	3989
    35                           
    36                           ; #config settings
    37  0000                     
    38                           	psect	cinit
    39  00FDC8                     __pcinit:
    40                           	opt stack 0
    41  00FDC8                     start_initialization:
    42                           	opt stack 0
    43  00FDC8                     __initialization:
    44                           	opt stack 0
    45                           
    46                           ; Clear objects allocated to COMRAM (3 bytes)
    47  00FDC8  6A0E               	clrf	(__pbssCOMRAM+2)& (0+255),c
    48  00FDCA  6A0D               	clrf	(__pbssCOMRAM+1)& (0+255),c
    49  00FDCC  6A0C               	clrf	__pbssCOMRAM& (0+255),c
    50                           
    51                           ; Initialize objects allocated to COMRAM (1 bytes)
    52                           ; load TBLPTR registers with __pidataCOMRAM
    53  00FDCE  0EC7               	movlw	low __pidataCOMRAM
    54  00FDD0  6EF6               	movwf	tblptrl,c
    55  00FDD2  0EFD               	movlw	high __pidataCOMRAM
    56  00FDD4  6EF7               	movwf	tblptrh,c
    57  00FDD6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    58  00FDD8  6EF8               	movwf	tblptru,c
    59  00FDDA  0009               	tblrd		*+	;fetch initializer
    60  00FDDC  CFF5 F00F          	movff	tablat,__pdataCOMRAM
    61  00FDE0                     end_of_initialization:
    62                           	opt stack 0
    63  00FDE0                     __end_of__initialization:
    64                           	opt stack 0
    65  00FDE0  0E00               	movlw	low (__Lmediumconst shr (0+16))
    66  00FDE2  6EF8               	movwf	tblptru,c
    67  00FDE4  0100               	movlb	0
    68  00FDE6  EF9B  F07F         	goto	_main	;jump to C main() function
    69                           tblptru	equ	0xFF8
    70                           tblptrh	equ	0xFF7
    71                           tblptrl	equ	0xFF6
    72                           tablat	equ	0xFF5
    73                           
    74                           	psect	bssCOMRAM
    75  00000C                     __pbssCOMRAM:
    76                           	opt stack 0
    77  00000C                     _d:
    78                           	opt stack 0
    79  00000C                     	ds	2
    80  00000E                     _ope:
    81                           	opt stack 0
    82  00000E                     	ds	1
    83                           tblptru	equ	0xFF8
    84                           tblptrh	equ	0xFF7
    85                           tblptrl	equ	0xFF6
    86                           tablat	equ	0xFF5
    87                           
    88                           	psect	dataCOMRAM
    89  00000F                     __pdataCOMRAM:
    90                           	opt stack 0
    91  00000F                     _a:
    92                           	opt stack 0
    93  00000F                     	ds	1
    94                           tblptru	equ	0xFF8
    95                           tblptrh	equ	0xFF7
    96                           tblptrl	equ	0xFF6
    97                           tablat	equ	0xFF5
    98                           
    99                           	psect	cstackCOMRAM
   100  000001                     __pcstackCOMRAM:
   101                           	opt stack 0
   102  000001                     rotar_derecha_0@c:
   103                           	opt stack 0
   104  000001                     rotar_izquierda_0@c:
   105                           	opt stack 0
   106                           
   107                           ; 1 bytes @ 0x0
   108  000001                     	ds	1
   109  000002                     sel_ope@ope:
   110                           	opt stack 0
   111                           
   112                           ; 2 bytes @ 0x1
   113  000002                     	ds	2
   114  000004                     ??_sel_ope:
   115                           
   116                           ; 0 bytes @ 0x3
   117  000004                     	ds	2
   118  000006                     
   119                           ; 2 bytes @ 0x5
   120  000006                     	ds	2
   121  000008                     
   122                           ; 3 bytes @ 0x7
   123  000008                     	ds	3
   124  00000B                     ??_main:
   125                           
   126                           ; 0 bytes @ 0xA
   127  00000B                     	ds	1
   128                           tblptru	equ	0xFF8
   129                           tblptrh	equ	0xFF7
   130                           tblptrl	equ	0xFF6
   131                           tablat	equ	0xFF5
   132                           
   133 ;;
   134 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   135 ;;
   136 ;; *************** function _main *****************
   137 ;; Defined at:
   138 ;;		line 106 in file "main.c"
   139 ;; Parameters:    Size  Location     Type
   140 ;;  argc            2    5[COMRAM] int 
   141 ;;  argv            3    7[COMRAM] PTR PTR unsigned char 
   142 ;; Auto vars:     Size  Location     Type
   143 ;;		None
   144 ;; Return value:  Size  Location     Type
   145 ;;                  2    5[COMRAM] int 
   146 ;; Registers used:
   147 ;;		wreg, status,2, status,0, cstack
   148 ;; Tracked objects:
   149 ;;		On entry : 0/0
   150 ;;		On exit  : 0/0
   151 ;;		Unchanged: 0/0
   152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   153 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   156 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   157 ;;Total ram usage:        6 bytes
   158 ;; Hardware stack levels required when called:    2
   159 ;; This function calls:
   160 ;;		_sel_ope
   161 ;; This function is called by:
   162 ;;		Startup code after reset
   163 ;; This function uses a non-reentrant model
   164 ;;
   165                           
   166                           	psect	text0
   167  00FF36                     __ptext0:
   168                           	opt stack 0
   169  00FF36                     _main:
   170                           	opt stack 29
   171                           
   172                           ;main.c: 108: PORTD=0;
   173                           
   174                           ;incstack = 0
   175  00FF36  0E00               	movlw	0
   176  00FF38  6E83               	movwf	3971,c	;volatile
   177                           
   178                           ;main.c: 109: LATD=0;
   179  00FF3A  0E00               	movlw	0
   180  00FF3C  6E8C               	movwf	3980,c	;volatile
   181                           
   182                           ;main.c: 110: PORTB=0;
   183  00FF3E  0E00               	movlw	0
   184  00FF40  6E81               	movwf	3969,c	;volatile
   185                           
   186                           ;main.c: 111: TRISB=0;
   187  00FF42  0E00               	movlw	0
   188  00FF44  6E93               	movwf	3987,c	;volatile
   189                           
   190                           ;main.c: 112: TRISD=0;
   191  00FF46  0E00               	movlw	0
   192  00FF48  6E95               	movwf	3989,c	;volatile
   193                           
   194                           ;main.c: 113: ANSEL=0XE0;
   195  00FF4A  0EE0               	movlw	224
   196  00FF4C  6E7E               	movwf	3966,c	;volatile
   197                           
   198                           ;main.c: 114: TRISA=0XFF;
   199  00FF4E  6892               	setf	3986,c	;volatile
   200  00FF50                     l804:
   201                           
   202                           ;main.c: 120: _delay((unsigned long)((22)*(32000000/4000.0)));
   203  00FF50  0EE5               	movlw	229
   204  00FF52  6E0B               	movwf	??_main& (0+255),c
   205  00FF54  0E91               	movlw	145
   206  00FF56                     u147:
   207  00FF56  2EE8               	decfsz	wreg,f,c
   208  00FF58  D7FE               	goto	u147
   209  00FF5A  2E0B               	decfsz	??_main& (0+255),f,c
   210  00FF5C  D7FC               	goto	u147
   211  00FF5E  F000               	nop	
   212                           
   213                           ;main.c: 121: _delay((unsigned long)((22)*(32000000/4000.0)));
   214  00FF60  0EE5               	movlw	229
   215  00FF62  6E0B               	movwf	??_main& (0+255),c
   216  00FF64  0E91               	movlw	145
   217  00FF66                     u157:
   218  00FF66  2EE8               	decfsz	wreg,f,c
   219  00FF68  D7FE               	goto	u157
   220  00FF6A  2E0B               	decfsz	??_main& (0+255),f,c
   221  00FF6C  D7FC               	goto	u157
   222  00FF6E  F000               	nop	
   223                           
   224                           ;main.c: 122: _delay((unsigned long)((22)*(32000000/4000.0)));
   225  00FF70  0EE5               	movlw	229
   226  00FF72  6E0B               	movwf	??_main& (0+255),c
   227  00FF74  0E91               	movlw	145
   228  00FF76                     u167:
   229  00FF76  2EE8               	decfsz	wreg,f,c
   230  00FF78  D7FE               	goto	u167
   231  00FF7A  2E0B               	decfsz	??_main& (0+255),f,c
   232  00FF7C  D7FC               	goto	u167
   233  00FF7E  F000               	nop	
   234                           
   235                           ;main.c: 123: _delay((unsigned long)((22)*(32000000/4000.0)));
   236  00FF80  0EE5               	movlw	229
   237  00FF82  6E0B               	movwf	??_main& (0+255),c
   238  00FF84  0E91               	movlw	145
   239  00FF86                     u177:
   240  00FF86  2EE8               	decfsz	wreg,f,c
   241  00FF88  D7FE               	goto	u177
   242  00FF8A  2E0B               	decfsz	??_main& (0+255),f,c
   243  00FF8C  D7FC               	goto	u177
   244  00FF8E  F000               	nop	
   245                           
   246                           ;main.c: 131: if (PORTAbits.RA5==0){
   247  00FF90  AA80               	btfss	3968,5,c	;volatile
   248  00FF92  D026               	goto	l826
   249  00FF94  D02F               	goto	l832
   250  00FF96                     l816:
   251                           
   252                           ;main.c: 133: sel_ope(ope);
   253  00FF96  C00E  F002         	movff	_ope,sel_ope@ope
   254  00FF9A  6A03               	clrf	sel_ope@ope+1,c
   255  00FF9C  EC72  F07F         	call	_sel_ope	;wreg free
   256                           
   257                           ;main.c: 134: _delay((unsigned long)((22)*(32000000/4000.0)));
   258  00FFA0  0EE5               	movlw	229
   259  00FFA2  6E0B               	movwf	??_main& (0+255),c
   260  00FFA4  0E91               	movlw	145
   261  00FFA6                     u187:
   262  00FFA6  2EE8               	decfsz	wreg,f,c
   263  00FFA8  D7FE               	goto	u187
   264  00FFAA  2E0B               	decfsz	??_main& (0+255),f,c
   265  00FFAC  D7FC               	goto	u187
   266  00FFAE  F000               	nop	
   267                           
   268                           ;main.c: 135: _delay((unsigned long)((22)*(32000000/4000.0)));
   269  00FFB0  0EE5               	movlw	229
   270  00FFB2  6E0B               	movwf	??_main& (0+255),c
   271  00FFB4  0E91               	movlw	145
   272  00FFB6                     u197:
   273  00FFB6  2EE8               	decfsz	wreg,f,c
   274  00FFB8  D7FE               	goto	u197
   275  00FFBA  2E0B               	decfsz	??_main& (0+255),f,c
   276  00FFBC  D7FC               	goto	u197
   277  00FFBE  F000               	nop	
   278                           
   279                           ;main.c: 136: _delay((unsigned long)((22)*(32000000/4000.0)));
   280  00FFC0  0EE5               	movlw	229
   281  00FFC2  6E0B               	movwf	??_main& (0+255),c
   282  00FFC4  0E91               	movlw	145
   283  00FFC6                     u207:
   284  00FFC6  2EE8               	decfsz	wreg,f,c
   285  00FFC8  D7FE               	goto	u207
   286  00FFCA  2E0B               	decfsz	??_main& (0+255),f,c
   287  00FFCC  D7FC               	goto	u207
   288  00FFCE  F000               	nop	
   289                           
   290                           ;main.c: 137: _delay((unsigned long)((22)*(32000000/4000.0)));
   291  00FFD0  0EE5               	movlw	229
   292  00FFD2  6E0B               	movwf	??_main& (0+255),c
   293  00FFD4  0E91               	movlw	145
   294  00FFD6                     u217:
   295  00FFD6  2EE8               	decfsz	wreg,f,c
   296  00FFD8  D7FE               	goto	u217
   297  00FFDA  2E0B               	decfsz	??_main& (0+255),f,c
   298  00FFDC  D7FC               	goto	u217
   299  00FFDE  F000               	nop	
   300  00FFE0                     l826:
   301  00FFE0  AA80               	btfss	3968,5,c	;volatile
   302  00FFE2  D7D9               	goto	l816
   303                           
   304                           ;main.c: 138: }
   305                           ;main.c: 139: ope=ope+1;
   306  00FFE4  280E               	incf	_ope,w,c
   307  00FFE6  6E0E               	movwf	_ope,c
   308                           
   309                           ;main.c: 140: if (ope==6)
   310  00FFE8  0E06               	movlw	6
   311  00FFEA  180E               	xorwf	_ope,w,c
   312  00FFEC  A4D8               	btfss	status,2,c
   313  00FFEE  D002               	goto	l832
   314                           
   315                           ;main.c: 141: ope=1;
   316  00FFF0  0E01               	movlw	1
   317  00FFF2  6E0E               	movwf	_ope,c
   318  00FFF4                     l832:
   319                           
   320                           ;main.c: 142: }
   321                           ;main.c: 143: sel_ope(ope);
   322  00FFF4  C00E  F002         	movff	_ope,sel_ope@ope
   323  00FFF8  6A03               	clrf	sel_ope@ope+1,c
   324  00FFFA  EC72  F07F         	call	_sel_ope	;wreg free
   325  00FFFE  D7A8               	goto	l804
   326  010000                     __end_of_main:
   327                           	opt stack 0
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           wreg	equ	0xFE8
   333                           status	equ	0xFD8
   334                           
   335 ;; *************** function _sel_ope *****************
   336 ;; Defined at:
   337 ;;		line 84 in file "main.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;  ope             2    1[COMRAM] int 
   340 ;; Auto vars:     Size  Location     Type
   341 ;;		None
   342 ;; Return value:  Size  Location     Type
   343 ;;		None               void
   344 ;; Registers used:
   345 ;;		wreg, status,2, status,0, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   355 ;;Total ram usage:        4 bytes
   356 ;; Hardware stack levels used:    1
   357 ;; Hardware stack levels required when called:    1
   358 ;; This function calls:
   359 ;;		_rotar
   360 ;;		_rotar_derecha
   361 ;;		_rotar_derecha_0
   362 ;;		_rotar_izquierda
   363 ;;		_rotar_izquierda_0
   364 ;; This function is called by:
   365 ;;		_main
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           	psect	text1
   370  00FEE4                     __ptext1:
   371                           	opt stack 0
   372  00FEE4                     _sel_ope:
   373                           	opt stack 29
   374                           
   375                           ;main.c: 85: switch (ope){
   376                           
   377                           ;incstack = 0
   378  00FEE4  D00F               	goto	l794
   379  00FEE6                     l782:
   380                           
   381                           ;main.c: 87: rotar();
   382  00FEE6  EC4D  F07F         	call	_rotar	;wreg free
   383                           
   384                           ;main.c: 88: break;
   385  00FEEA  0012               	return	
   386  00FEEC                     l784:
   387                           
   388                           ;main.c: 90: rotar_derecha();
   389  00FEEC  EC09  F07F         	call	_rotar_derecha	;wreg free
   390                           
   391                           ;main.c: 91: break;
   392  00FEF0  0012               	return	
   393  00FEF2                     l786:
   394                           
   395                           ;main.c: 93: rotar_izquierda();
   396  00FEF2  ECF5  F07E         	call	_rotar_izquierda	;wreg free
   397                           
   398                           ;main.c: 94: break;
   399  00FEF6  0012               	return	
   400  00FEF8                     l788:
   401                           
   402                           ;main.c: 96: rotar_derecha_0();
   403  00FEF8  EC35  F07F         	call	_rotar_derecha_0	;wreg free
   404                           
   405                           ;main.c: 97: break;
   406  00FEFC  0012               	return	
   407  00FEFE                     l790:
   408                           
   409                           ;main.c: 99: rotar_izquierda_0();
   410  00FEFE  EC1E  F07F         	call	_rotar_izquierda_0	;wreg free
   411                           
   412                           ;main.c: 101: }
   413                           
   414                           ;main.c: 100: break;
   415  00FF02  0012               	return	
   416  00FF04                     l794:
   417  00FF04  C002  F004         	movff	sel_ope@ope,??_sel_ope
   418  00FF08  C003  F005         	movff	sel_ope@ope+1,??_sel_ope+1
   419                           
   420                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   421                           ; Switch size 1, requested type "space"
   422                           ; Number of cases is 1, Range of values is 0 to 0
   423                           ; switch strategies available:
   424                           ; Name         Instructions Cycles
   425                           ; simple_byte            4     3 (average)
   426                           ;	Chosen strategy is simple_byte
   427  00FF0C  5005               	movf	??_sel_ope+1,w,c
   428  00FF0E  0A00               	xorlw	0	; case 0
   429  00FF10  A4D8               	btfss	status,2,c
   430  00FF12  0012               	return	
   431                           
   432                           ; Switch size 1, requested type "space"
   433                           ; Number of cases is 5, Range of values is 1 to 5
   434                           ; switch strategies available:
   435                           ; Name         Instructions Cycles
   436                           ; simple_byte           16     9 (average)
   437                           ;	Chosen strategy is simple_byte
   438  00FF14  5004               	movf	??_sel_ope,w,c
   439  00FF16  0A01               	xorlw	1	; case 1
   440  00FF18  B4D8               	btfsc	status,2,c
   441  00FF1A  D7E5               	goto	l782
   442  00FF1C  0A03               	xorlw	3	; case 2
   443  00FF1E  B4D8               	btfsc	status,2,c
   444  00FF20  D7E5               	goto	l784
   445  00FF22  0A01               	xorlw	1	; case 3
   446  00FF24  B4D8               	btfsc	status,2,c
   447  00FF26  D7E5               	goto	l786
   448  00FF28  0A07               	xorlw	7	; case 4
   449  00FF2A  B4D8               	btfsc	status,2,c
   450  00FF2C  D7E5               	goto	l788
   451  00FF2E  0A01               	xorlw	1	; case 5
   452  00FF30  A4D8               	btfss	status,2,c
   453  00FF32  0012               	return	
   454  00FF34  D7E4               	goto	l790
   455  00FF36                     __end_of_sel_ope:
   456                           	opt stack 0
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           wreg	equ	0xFE8
   462                           status	equ	0xFD8
   463                           
   464 ;; *************** function _rotar_izquierda_0 *****************
   465 ;; Defined at:
   466 ;;		line 31 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  c               1    0[COMRAM] unsigned char 
   471 ;; Return value:  Size  Location     Type
   472 ;;		None               void
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   484 ;;Total ram usage:        1 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_sel_ope
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text2
   494  00FE3C                     __ptext2:
   495                           	opt stack 0
   496  00FE3C                     _rotar_izquierda_0:
   497                           	opt stack 29
   498                           
   499                           ;main.c: 32: unsigned char c;
   500                           ;main.c: 33: LATD &=0XF0;
   501                           
   502                           ;incstack = 0
   503  00FE3C  0EF0               	movlw	240
   504  00FE3E  168C               	andwf	3980,f,c	;volatile
   505                           
   506                           ;main.c: 34: LATB &= 0XF0;
   507  00FE40  0EF0               	movlw	240
   508  00FE42  168A               	andwf	3978,f,c	;volatile
   509                           
   510                           ;main.c: 35: LATD |=(c & 0x0F);
   511  00FE44  5001               	movf	rotar_izquierda_0@c,w,c
   512  00FE46  0B0F               	andlw	15
   513  00FE48  128C               	iorwf	3980,f,c	;volatile
   514                           
   515                           ;main.c: 36: LATB |=(c>>4);
   516  00FE4A  3801               	swapf	rotar_izquierda_0@c,w,c
   517  00FE4C  0B0F               	andlw	15
   518  00FE4E  128A               	iorwf	3978,f,c	;volatile
   519                           
   520                           ;main.c: 37: c=0xFF & ~ a;
   521  00FE50  500F               	movf	_a,w,c
   522  00FE52  0AFF               	xorlw	255
   523  00FE54  6E01               	movwf	rotar_izquierda_0@c,c
   524                           
   525                           ;main.c: 38: if (a==1)
   526  00FE56  040F               	decf	_a,w,c
   527  00FE58  A4D8               	btfss	status,2,c
   528  00FE5A  D003               	goto	l698
   529                           
   530                           ;main.c: 39: a=128;
   531  00FE5C  0E80               	movlw	128
   532  00FE5E  6E0F               	movwf	_a,c
   533  00FE60  0012               	return	
   534  00FE62                     l698:
   535                           
   536                           ;main.c: 40: else
   537                           ;main.c: 41: a=a>>1;
   538  00FE62  90D8               	bcf	status,0,c
   539  00FE64  300F               	rrcf	_a,w,c
   540  00FE66  6E0F               	movwf	_a,c
   541  00FE68  0012               	return	
   542  00FE6A                     __end_of_rotar_izquierda_0:
   543                           	opt stack 0
   544                           tblptru	equ	0xFF8
   545                           tblptrh	equ	0xFF7
   546                           tblptrl	equ	0xFF6
   547                           tablat	equ	0xFF5
   548                           wreg	equ	0xFE8
   549                           status	equ	0xFD8
   550                           
   551 ;; *************** function _rotar_izquierda *****************
   552 ;; Defined at:
   553 ;;		line 56 in file "main.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;		None               void
   560 ;; Registers used:
   561 ;;		wreg, status,2, status,0
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   571 ;;Total ram usage:        0 bytes
   572 ;; Hardware stack levels used:    1
   573 ;; This function calls:
   574 ;;		Nothing
   575 ;; This function is called by:
   576 ;;		_sel_ope
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text3
   581  00FDEA                     __ptext3:
   582                           	opt stack 0
   583  00FDEA                     _rotar_izquierda:
   584                           	opt stack 29
   585                           
   586                           ;main.c: 57: LATD &=0XF0;
   587                           
   588                           ;incstack = 0
   589  00FDEA  0EF0               	movlw	240
   590  00FDEC  168C               	andwf	3980,f,c	;volatile
   591                           
   592                           ;main.c: 58: LATB &= 0XF0;
   593  00FDEE  0EF0               	movlw	240
   594  00FDF0  168A               	andwf	3978,f,c	;volatile
   595                           
   596                           ;main.c: 59: LATD |=(a & 0x0F);
   597  00FDF2  500F               	movf	_a,w,c
   598  00FDF4  0B0F               	andlw	15
   599  00FDF6  128C               	iorwf	3980,f,c	;volatile
   600                           
   601                           ;main.c: 60: LATB |=(a>>4);
   602  00FDF8  380F               	swapf	_a,w,c
   603  00FDFA  0B0F               	andlw	15
   604  00FDFC  128A               	iorwf	3978,f,c	;volatile
   605                           
   606                           ;main.c: 61: if (a==1)
   607  00FDFE  040F               	decf	_a,w,c
   608  00FE00  A4D8               	btfss	status,2,c
   609  00FE02  D003               	goto	l710
   610                           
   611                           ;main.c: 62: a=128;
   612  00FE04  0E80               	movlw	128
   613  00FE06  6E0F               	movwf	_a,c
   614  00FE08  0012               	return	
   615  00FE0A                     l710:
   616                           
   617                           ;main.c: 63: else
   618                           ;main.c: 64: a=a>>1;
   619  00FE0A  90D8               	bcf	status,0,c
   620  00FE0C  300F               	rrcf	_a,w,c
   621  00FE0E  6E0F               	movwf	_a,c
   622  00FE10  0012               	return	
   623  00FE12                     __end_of_rotar_izquierda:
   624                           	opt stack 0
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           wreg	equ	0xFE8
   630                           status	equ	0xFD8
   631                           
   632 ;; *************** function _rotar_derecha_0 *****************
   633 ;; Defined at:
   634 ;;		line 18 in file "main.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;		None
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  c               1    0[COMRAM] unsigned char 
   639 ;; Return value:  Size  Location     Type
   640 ;;		None               void
   641 ;; Registers used:
   642 ;;		wreg, status,2, status,0
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;Total ram usage:        1 bytes
   653 ;; Hardware stack levels used:    1
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_sel_ope
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text4
   662  00FE6A                     __ptext4:
   663                           	opt stack 0
   664  00FE6A                     _rotar_derecha_0:
   665                           	opt stack 29
   666                           
   667                           ;main.c: 19: unsigned char c;
   668                           ;main.c: 20: LATD &=0XF0;
   669                           
   670                           ;incstack = 0
   671  00FE6A  0EF0               	movlw	240
   672  00FE6C  168C               	andwf	3980,f,c	;volatile
   673                           
   674                           ;main.c: 21: LATB &= 0XF0;
   675  00FE6E  0EF0               	movlw	240
   676  00FE70  168A               	andwf	3978,f,c	;volatile
   677                           
   678                           ;main.c: 22: LATD |=(c & 0x0F);
   679  00FE72  5001               	movf	rotar_derecha_0@c,w,c
   680  00FE74  0B0F               	andlw	15
   681  00FE76  128C               	iorwf	3980,f,c	;volatile
   682                           
   683                           ;main.c: 23: LATB |=(c>>4);
   684  00FE78  3801               	swapf	rotar_derecha_0@c,w,c
   685  00FE7A  0B0F               	andlw	15
   686  00FE7C  128A               	iorwf	3978,f,c	;volatile
   687                           
   688                           ;main.c: 24: c=0xFF & ~ a;
   689  00FE7E  500F               	movf	_a,w,c
   690  00FE80  0AFF               	xorlw	255
   691  00FE82  6E01               	movwf	rotar_derecha_0@c,c
   692                           
   693                           ;main.c: 25: if (a==128)
   694  00FE84  0E80               	movlw	128
   695  00FE86  180F               	xorwf	_a,w,c
   696  00FE88  A4D8               	btfss	status,2,c
   697  00FE8A  D003               	goto	l692
   698                           
   699                           ;main.c: 26: a=1;
   700  00FE8C  0E01               	movlw	1
   701  00FE8E  6E0F               	movwf	_a,c
   702  00FE90  0012               	return	
   703  00FE92                     l692:
   704                           
   705                           ;main.c: 27: else
   706                           ;main.c: 28: a=a<<1;
   707  00FE92  500F               	movf	_a,w,c
   708  00FE94  240F               	addwf	_a,w,c
   709  00FE96  6E0F               	movwf	_a,c
   710  00FE98  0012               	return	
   711  00FE9A                     __end_of_rotar_derecha_0:
   712                           	opt stack 0
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           wreg	equ	0xFE8
   718                           status	equ	0xFD8
   719                           
   720 ;; *************** function _rotar_derecha *****************
   721 ;; Defined at:
   722 ;;		line 45 in file "main.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;		None
   725 ;; Auto vars:     Size  Location     Type
   726 ;;		None
   727 ;; Return value:  Size  Location     Type
   728 ;;		None               void
   729 ;; Registers used:
   730 ;;		wreg, status,2, status,0
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;Total ram usage:        0 bytes
   741 ;; Hardware stack levels used:    1
   742 ;; This function calls:
   743 ;;		Nothing
   744 ;; This function is called by:
   745 ;;		_sel_ope
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text5
   750  00FE12                     __ptext5:
   751                           	opt stack 0
   752  00FE12                     _rotar_derecha:
   753                           	opt stack 29
   754                           
   755                           ;main.c: 46: LATD &=0XF0;
   756                           
   757                           ;incstack = 0
   758  00FE12  0EF0               	movlw	240
   759  00FE14  168C               	andwf	3980,f,c	;volatile
   760                           
   761                           ;main.c: 47: LATB &= 0XF0;
   762  00FE16  0EF0               	movlw	240
   763  00FE18  168A               	andwf	3978,f,c	;volatile
   764                           
   765                           ;main.c: 48: LATD |=(a & 0x0F);
   766  00FE1A  500F               	movf	_a,w,c
   767  00FE1C  0B0F               	andlw	15
   768  00FE1E  128C               	iorwf	3980,f,c	;volatile
   769                           
   770                           ;main.c: 49: LATB |=(a>>4);
   771  00FE20  380F               	swapf	_a,w,c
   772  00FE22  0B0F               	andlw	15
   773  00FE24  128A               	iorwf	3978,f,c	;volatile
   774                           
   775                           ;main.c: 50: if (a==128)
   776  00FE26  0E80               	movlw	128
   777  00FE28  180F               	xorwf	_a,w,c
   778  00FE2A  A4D8               	btfss	status,2,c
   779  00FE2C  D003               	goto	l704
   780                           
   781                           ;main.c: 51: a=1;
   782  00FE2E  0E01               	movlw	1
   783  00FE30  6E0F               	movwf	_a,c
   784  00FE32  0012               	return	
   785  00FE34                     l704:
   786                           
   787                           ;main.c: 52: else
   788                           ;main.c: 53: a=a<<1;
   789  00FE34  500F               	movf	_a,w,c
   790  00FE36  240F               	addwf	_a,w,c
   791  00FE38  6E0F               	movwf	_a,c
   792  00FE3A  0012               	return	
   793  00FE3C                     __end_of_rotar_derecha:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           wreg	equ	0xFE8
   800                           status	equ	0xFD8
   801                           
   802 ;; *************** function _rotar *****************
   803 ;; Defined at:
   804 ;;		line 66 in file "main.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;		None               void
   811 ;; Registers used:
   812 ;;		wreg, status,2, status,0
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;Total ram usage:        0 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; This function calls:
   825 ;;		Nothing
   826 ;; This function is called by:
   827 ;;		_sel_ope
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text6
   832  00FE9A                     __ptext6:
   833                           	opt stack 0
   834  00FE9A                     _rotar:
   835                           	opt stack 29
   836                           
   837                           ;main.c: 67: LATD &=0XF0;
   838                           
   839                           ;incstack = 0
   840  00FE9A  0EF0               	movlw	240
   841  00FE9C  168C               	andwf	3980,f,c	;volatile
   842                           
   843                           ;main.c: 68: LATB &= 0XF0;
   844  00FE9E  0EF0               	movlw	240
   845  00FEA0  168A               	andwf	3978,f,c	;volatile
   846                           
   847                           ;main.c: 69: LATD |=(a & 0x0F);
   848  00FEA2  500F               	movf	_a,w,c
   849  00FEA4  0B0F               	andlw	15
   850  00FEA6  128C               	iorwf	3980,f,c	;volatile
   851                           
   852                           ;main.c: 70: LATB |=(a>>4);
   853  00FEA8  380F               	swapf	_a,w,c
   854  00FEAA  0B0F               	andlw	15
   855  00FEAC  128A               	iorwf	3978,f,c	;volatile
   856                           
   857                           ;main.c: 71: if (d==0){
   858  00FEAE  500C               	movf	_d,w,c
   859  00FEB0  100D               	iorwf	_d+1,w,c
   860  00FEB2  A4D8               	btfss	status,2,c
   861  00FEB4  D00C               	goto	l718
   862                           
   863                           ;main.c: 72: a=a<<1;
   864  00FEB6  500F               	movf	_a,w,c
   865  00FEB8  240F               	addwf	_a,w,c
   866  00FEBA  6E0F               	movwf	_a,c
   867                           
   868                           ;main.c: 73: if (a==128)
   869  00FEBC  0E80               	movlw	128
   870  00FEBE  180F               	xorwf	_a,w,c
   871  00FEC0  A4D8               	btfss	status,2,c
   872  00FEC2  0012               	return	
   873                           
   874                           ;main.c: 74: d=1;
   875  00FEC4  0E00               	movlw	0
   876  00FEC6  6E0D               	movwf	_d+1,c
   877  00FEC8  0E01               	movlw	1
   878  00FECA  6E0C               	movwf	_d,c
   879                           
   880                           ;main.c: 75: }
   881  00FECC  0012               	return	
   882  00FECE                     l718:
   883                           
   884                           ;main.c: 76: else{
   885                           ;main.c: 77: a=a>>1;
   886  00FECE  90D8               	bcf	status,0,c
   887  00FED0  300F               	rrcf	_a,w,c
   888  00FED2  6E0F               	movwf	_a,c
   889                           
   890                           ;main.c: 78: if (a==1){
   891  00FED4  040F               	decf	_a,w,c
   892  00FED6  A4D8               	btfss	status,2,c
   893  00FED8  0012               	return	
   894                           
   895                           ;main.c: 79: d=0;
   896  00FEDA  0E00               	movlw	0
   897  00FEDC  6E0D               	movwf	_d+1,c
   898  00FEDE  0E00               	movlw	0
   899  00FEE0  6E0C               	movwf	_d,c
   900  00FEE2  0012               	return	
   901  00FEE4                     __end_of_rotar:
   902                           	opt stack 0
   903  0000                     tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           wreg	equ	0xFE8
   908                           status	equ	0xFD8
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           wreg	equ	0xFE8
   914                           status	equ	0xFD8
   915                           
   916                           	psect	rparam
   917  0000                     tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           wreg	equ	0xFE8
   922                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_sel_ope
    _sel_ope->_rotar_derecha_0
    _sel_ope->_rotar_izquierda_0

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     1      5     210
                                              5 COMRAM     6     1      5
                            _sel_ope
 ---------------------------------------------------------------------------------
 (1) _sel_ope                                              4     2      2     210
                                              1 COMRAM     4     2      2
                              _rotar
                      _rotar_derecha
                    _rotar_derecha_0
                    _rotar_izquierda
                  _rotar_izquierda_0
 ---------------------------------------------------------------------------------
 (2) _rotar_izquierda_0                                    1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _rotar_izquierda                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotar_derecha_0                                      1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _rotar_derecha                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotar                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sel_ope
     _rotar
     _rotar_derecha
     _rotar_derecha_0
     _rotar_izquierda
     _rotar_izquierda_0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B       F       1       15.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       F      32        0.0%
DATA                 0      0       F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Nov 12 18:46:52 2016

                         _a 000F                           _d 000C                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
                       l710 FE0A                         l704 FE34                         l804 FF50  
                       l718 FECE                         l816 FF96                         l832 FFF4  
                       l826 FFE0                         l692 FE92                         l790 FEFE  
                       l782 FEE6                         l784 FEEC                         l698 FE62  
                       l786 FEF2                         l794 FF04                         l788 FEF8  
              __CFG_CPB$OFF 000000                         u207 FFC6                         u217 FFD6  
                       u147 FF56                         u157 FF66                         u167 FF76  
                       u177 FF86                __CFG_CPD$OFF 000000                         u187 FFA6  
                       u197 FFB6               _rotar_derecha FE12                         _ope 000E  
              __CFG_BORV$18 000000                         wreg 000FE8                __CFG_LVP$OFF 000000  
                      _LATB 000F8A                        _LATD 000F8C                __CFG_PWRT$ON 000000  
                      _main FF36                        start 0000               __CFG_IESO$OFF 000000  
             __CFG_MCLRE$ON 000000                ___param_bank 000010                       ?_main 0006  
                     _ANSEL 000F7E              ?_rotar_derecha 0001                       _PORTB 000F81  
                     _PORTD 000F83                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISD 000F95               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             _rotar_derecha_0 FE6A              __CFG_EBTRB$OFF 000000  
                     _rotar FE9A             __end_of_sel_ope FF36              __CFG_BOREN$OFF 000000  
                     tablat 000FF5                       status 000FD8             __initialization FDC8  
              __end_of_main 0000                      ??_main 000B               __activetblptr 000002  
                    ?_rotar 0001             _rotar_izquierda FDEA              __CFG_WDTEN$OFF 000000  
            __CFG_XINST$OFF 000000             ??_rotar_derecha 0001     __end_of_rotar_derecha_0 FE9A  
              __pdataCOMRAM 000F                   ??_sel_ope 0004                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8             __CFG_HFOFST$OFF 000000  
           __CFG_FOSC$HSPLL 000000                  __accesstop 0060     __end_of__initialization FDE0  
           __CFG_PBADEN$OFF 000000               ___rparam_used 000001              __pcstackCOMRAM 0001  
             __end_of_rotar FEE4     __end_of_rotar_izquierda FE12                     ??_rotar 0001  
          ?_rotar_derecha_0 0001                     __Hparam 0000                     __Lparam 0000  
           __CFG_STVREN$OFF 000000                     __pcinit FDC8                     __ramtop 1000  
                   __ptext0 FF36                     __ptext1 FEE4                     __ptext2 FE3C  
                   __ptext3 FDEA                     __ptext4 FE6A                     __ptext5 FE12  
                   __ptext6 FE9A            ?_rotar_izquierda 0001                     _sel_ope FEE4  
      end_of_initialization FDE0               __Lmediumconst 0000                   _PORTAbits 000F80  
        rotar_izquierda_0@c 0001               __pidataCOMRAM FDC7       __end_of_rotar_derecha FE3C  
       start_initialization FDC8            rotar_derecha_0@c 0001            __CFG_LPT1OSC$OFF 000000  
               __pbssCOMRAM 000C           __CFG_CCP2MX$PORTC 000000                  sel_ope@ope 0002  
                  ?_sel_ope 0002    __size_of_rotar_derecha_0 0030              __size_of_rotar 004A  
         _rotar_izquierda_0 FE3C          ?_rotar_izquierda_0 0001            __CFG_WDTPS$32768 000000  
       ??_rotar_izquierda_0 0001   __end_of_rotar_izquierda_0 FE6A    __size_of_rotar_izquierda 0028  
                  __Hrparam 0000                    __Lrparam 0000            __size_of_sel_ope 0052  
             __size_of_main 00CA           ??_rotar_derecha_0 0001                    main@argc 0006  
                  main@argv 0008  __size_of_rotar_izquierda_0 002E      __size_of_rotar_derecha 002A  
         ??_rotar_izquierda 0001  
